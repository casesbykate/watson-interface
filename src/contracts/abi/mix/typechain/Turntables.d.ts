/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface TurntablesInterface extends ethers.utils.Interface {
  functions: {
    "mixEmitter()": FunctionFragment;
    "typeWhitelist(uint256)": FunctionFragment;
    "turntableLength()": FunctionFragment;
    "charge(uint256,uint256)": FunctionFragment;
    "setChargingEfficiency(uint256)": FunctionFragment;
    "claimedOf(uint256)": FunctionFragment;
    "addType(uint256,uint256,uint256,uint256)": FunctionFragment;
    "exists(uint256)": FunctionFragment;
    "claimableOf(uint256)": FunctionFragment;
    "totalVolume()": FunctionFragment;
    "typeCount()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "claim(uint256[])": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "allowType(uint256)": FunctionFragment;
    "accumulativeOf(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "isOwner()": FunctionFragment;
    "destroy(uint256)": FunctionFragment;
    "mix()": FunctionFragment;
    "chargingEfficiency()": FunctionFragment;
    "denyType(uint256)": FunctionFragment;
    "types(uint256)": FunctionFragment;
    "buy(uint256)": FunctionFragment;
    "turntables(uint256)": FunctionFragment;
    "pid()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "mixEmitter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "typeWhitelist",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "turntableLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "charge",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setChargingEfficiency",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimedOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addType",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exists",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimableOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalVolume",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "typeCount", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowType",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "accumulativeOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "isOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "destroy",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "mix", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "chargingEfficiency",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "denyType",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "types", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "buy", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "turntables",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "pid", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "mixEmitter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "typeWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "turntableLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "charge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setChargingEfficiency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimedOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addType", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exists", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimableOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalVolume",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "typeCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowType", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "accumulativeOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "destroy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mix", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "chargingEfficiency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "denyType", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "types", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "turntables", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "AddType(uint256,uint256,uint256,uint256)": EventFragment;
    "AllowType(uint256)": EventFragment;
    "DenyType(uint256)": EventFragment;
    "ChangeChargingEfficiency(uint256)": EventFragment;
    "Buy(address,uint256)": EventFragment;
    "Charge(address,uint256,uint256)": EventFragment;
    "Destroy(address,uint256)": EventFragment;
    "Distribute(address,uint256)": EventFragment;
    "Claim(uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddType"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AllowType"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DenyType"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangeChargingEfficiency"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Buy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Charge"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Destroy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Distribute"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type AddTypeEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber] & {
    price: BigNumber;
    destroyReturn: BigNumber;
    volume: BigNumber;
    lifetime: BigNumber;
  }
>;

export type AllowTypeEvent = TypedEvent<[BigNumber] & { typeId: BigNumber }>;

export type DenyTypeEvent = TypedEvent<[BigNumber] & { typeId: BigNumber }>;

export type ChangeChargingEfficiencyEvent = TypedEvent<
  [BigNumber] & { value: BigNumber }
>;

export type BuyEvent = TypedEvent<
  [string, BigNumber] & { owner: string; turntableId: BigNumber }
>;

export type ChargeEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    owner: string;
    turntableId: BigNumber;
    amount: BigNumber;
  }
>;

export type DestroyEvent = TypedEvent<
  [string, BigNumber] & { owner: string; turntableId: BigNumber }
>;

export type DistributeEvent = TypedEvent<
  [string, BigNumber] & { by: string; distributed: BigNumber }
>;

export type ClaimEvent = TypedEvent<
  [BigNumber, BigNumber] & { turntableId: BigNumber; claimed: BigNumber }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class Turntables extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TurntablesInterface;

  functions: {
    mixEmitter(overrides?: CallOverrides): Promise<[string]>;

    typeWhitelist(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    turntableLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    charge(
      turntableId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setChargingEfficiency(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimedOf(
      turntableId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    addType(
      price: BigNumberish,
      destroyReturn: BigNumberish,
      volume: BigNumberish,
      lifetime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exists(
      turntableId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    claimableOf(
      turntableId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalVolume(overrides?: CallOverrides): Promise<[BigNumber]>;

    typeCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    ownerOf(
      turntableId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    claim(
      turntableIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allowType(
      typeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    accumulativeOf(
      turntableId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    isOwner(overrides?: CallOverrides): Promise<[boolean]>;

    destroy(
      turntableId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mix(overrides?: CallOverrides): Promise<[string]>;

    chargingEfficiency(overrides?: CallOverrides): Promise<[BigNumber]>;

    denyType(
      typeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    types(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        price: BigNumber;
        destroyReturn: BigNumber;
        volume: BigNumber;
        lifetime: BigNumber;
      }
    >;

    buy(
      typeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    turntables(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        owner: string;
        typeId: BigNumber;
        endBlock: BigNumber;
        lastClaimedBlock: BigNumber;
      }
    >;

    pid(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  mixEmitter(overrides?: CallOverrides): Promise<string>;

  typeWhitelist(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  turntableLength(overrides?: CallOverrides): Promise<BigNumber>;

  charge(
    turntableId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setChargingEfficiency(
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimedOf(
    turntableId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  addType(
    price: BigNumberish,
    destroyReturn: BigNumberish,
    volume: BigNumberish,
    lifetime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exists(
    turntableId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  claimableOf(
    turntableId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalVolume(overrides?: CallOverrides): Promise<BigNumber>;

  typeCount(overrides?: CallOverrides): Promise<BigNumber>;

  ownerOf(
    turntableId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  claim(
    turntableIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allowType(
    typeId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  accumulativeOf(
    turntableId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  isOwner(overrides?: CallOverrides): Promise<boolean>;

  destroy(
    turntableId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mix(overrides?: CallOverrides): Promise<string>;

  chargingEfficiency(overrides?: CallOverrides): Promise<BigNumber>;

  denyType(
    typeId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  types(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      price: BigNumber;
      destroyReturn: BigNumber;
      volume: BigNumber;
      lifetime: BigNumber;
    }
  >;

  buy(
    typeId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  turntables(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber] & {
      owner: string;
      typeId: BigNumber;
      endBlock: BigNumber;
      lastClaimedBlock: BigNumber;
    }
  >;

  pid(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    mixEmitter(overrides?: CallOverrides): Promise<string>;

    typeWhitelist(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    turntableLength(overrides?: CallOverrides): Promise<BigNumber>;

    charge(
      turntableId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setChargingEfficiency(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimedOf(
      turntableId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addType(
      price: BigNumberish,
      destroyReturn: BigNumberish,
      volume: BigNumberish,
      lifetime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exists(
      turntableId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    claimableOf(
      turntableId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalVolume(overrides?: CallOverrides): Promise<BigNumber>;

    typeCount(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      turntableId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    claim(
      turntableIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    allowType(typeId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    accumulativeOf(
      turntableId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    isOwner(overrides?: CallOverrides): Promise<boolean>;

    destroy(
      turntableId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mix(overrides?: CallOverrides): Promise<string>;

    chargingEfficiency(overrides?: CallOverrides): Promise<BigNumber>;

    denyType(typeId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    types(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        price: BigNumber;
        destroyReturn: BigNumber;
        volume: BigNumber;
        lifetime: BigNumber;
      }
    >;

    buy(typeId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    turntables(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        owner: string;
        typeId: BigNumber;
        endBlock: BigNumber;
        lastClaimedBlock: BigNumber;
      }
    >;

    pid(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddType(uint256,uint256,uint256,uint256)"(
      price?: null,
      destroyReturn?: null,
      volume?: null,
      lifetime?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber],
      {
        price: BigNumber;
        destroyReturn: BigNumber;
        volume: BigNumber;
        lifetime: BigNumber;
      }
    >;

    AddType(
      price?: null,
      destroyReturn?: null,
      volume?: null,
      lifetime?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber],
      {
        price: BigNumber;
        destroyReturn: BigNumber;
        volume: BigNumber;
        lifetime: BigNumber;
      }
    >;

    "AllowType(uint256)"(
      typeId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { typeId: BigNumber }>;

    AllowType(
      typeId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { typeId: BigNumber }>;

    "DenyType(uint256)"(
      typeId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { typeId: BigNumber }>;

    DenyType(
      typeId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { typeId: BigNumber }>;

    "ChangeChargingEfficiency(uint256)"(
      value?: null
    ): TypedEventFilter<[BigNumber], { value: BigNumber }>;

    ChangeChargingEfficiency(
      value?: null
    ): TypedEventFilter<[BigNumber], { value: BigNumber }>;

    "Buy(address,uint256)"(
      owner?: string | null,
      turntableId?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { owner: string; turntableId: BigNumber }
    >;

    Buy(
      owner?: string | null,
      turntableId?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { owner: string; turntableId: BigNumber }
    >;

    "Charge(address,uint256,uint256)"(
      owner?: string | null,
      turntableId?: BigNumberish | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { owner: string; turntableId: BigNumber; amount: BigNumber }
    >;

    Charge(
      owner?: string | null,
      turntableId?: BigNumberish | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { owner: string; turntableId: BigNumber; amount: BigNumber }
    >;

    "Destroy(address,uint256)"(
      owner?: string | null,
      turntableId?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { owner: string; turntableId: BigNumber }
    >;

    Destroy(
      owner?: string | null,
      turntableId?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { owner: string; turntableId: BigNumber }
    >;

    "Distribute(address,uint256)"(
      by?: string | null,
      distributed?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { by: string; distributed: BigNumber }
    >;

    Distribute(
      by?: string | null,
      distributed?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { by: string; distributed: BigNumber }
    >;

    "Claim(uint256,uint256)"(
      turntableId?: BigNumberish | null,
      claimed?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { turntableId: BigNumber; claimed: BigNumber }
    >;

    Claim(
      turntableId?: BigNumberish | null,
      claimed?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { turntableId: BigNumber; claimed: BigNumber }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    mixEmitter(overrides?: CallOverrides): Promise<BigNumber>;

    typeWhitelist(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    turntableLength(overrides?: CallOverrides): Promise<BigNumber>;

    charge(
      turntableId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setChargingEfficiency(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimedOf(
      turntableId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addType(
      price: BigNumberish,
      destroyReturn: BigNumberish,
      volume: BigNumberish,
      lifetime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exists(
      turntableId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimableOf(
      turntableId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalVolume(overrides?: CallOverrides): Promise<BigNumber>;

    typeCount(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      turntableId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claim(
      turntableIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allowType(
      typeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    accumulativeOf(
      turntableId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    isOwner(overrides?: CallOverrides): Promise<BigNumber>;

    destroy(
      turntableId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mix(overrides?: CallOverrides): Promise<BigNumber>;

    chargingEfficiency(overrides?: CallOverrides): Promise<BigNumber>;

    denyType(
      typeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    types(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    buy(
      typeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    turntables(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pid(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    mixEmitter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    typeWhitelist(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    turntableLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    charge(
      turntableId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setChargingEfficiency(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimedOf(
      turntableId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addType(
      price: BigNumberish,
      destroyReturn: BigNumberish,
      volume: BigNumberish,
      lifetime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exists(
      turntableId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimableOf(
      turntableId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalVolume(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    typeCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      turntableId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claim(
      turntableIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allowType(
      typeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    accumulativeOf(
      turntableId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    destroy(
      turntableId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mix(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    chargingEfficiency(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    denyType(
      typeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    types(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buy(
      typeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    turntables(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pid(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
