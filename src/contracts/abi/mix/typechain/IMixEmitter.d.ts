/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IMixEmitterInterface extends ethers.utils.Interface {
  functions: {
    "poolInfo(uint256)": FunctionFragment;
    "totalAllocPoint()": FunctionFragment;
    "started()": FunctionFragment;
    "updatePool(uint256)": FunctionFragment;
    "mix()": FunctionFragment;
    "pendingMix(uint256)": FunctionFragment;
    "emissionPerBlock()": FunctionFragment;
    "poolCount()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "poolInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalAllocPoint",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "started", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updatePool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "mix", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingMix",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emissionPerBlock",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "poolCount", values?: undefined): string;

  decodeFunctionResult(functionFragment: "poolInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalAllocPoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "started", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updatePool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mix", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pendingMix", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emissionPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolCount", data: BytesLike): Result;

  events: {
    "Add(address,uint256)": EventFragment;
    "Set(uint256,uint256)": EventFragment;
    "SetEmissionPerBlock(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Add"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Set"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetEmissionPerBlock"): EventFragment;
}

export type AddEvent = TypedEvent<
  [string, BigNumber] & { to: string; allocPoint: BigNumber }
>;

export type SetEvent = TypedEvent<
  [BigNumber, BigNumber] & { pid: BigNumber; allocPoint: BigNumber }
>;

export type SetEmissionPerBlockEvent = TypedEvent<
  [BigNumber] & { emissionPerBlock: BigNumber }
>;

export class IMixEmitter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IMixEmitterInterface;

  functions: {
    poolInfo(
      pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        to: string;
        allocPoint: BigNumber;
        lastEmitBlock: BigNumber;
      }
    >;

    totalAllocPoint(overrides?: CallOverrides): Promise<[BigNumber]>;

    started(overrides?: CallOverrides): Promise<[boolean]>;

    updatePool(
      pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mix(overrides?: CallOverrides): Promise<[string]>;

    pendingMix(
      pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    emissionPerBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    poolCount(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  poolInfo(
    pid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      to: string;
      allocPoint: BigNumber;
      lastEmitBlock: BigNumber;
    }
  >;

  totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

  started(overrides?: CallOverrides): Promise<boolean>;

  updatePool(
    pid: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mix(overrides?: CallOverrides): Promise<string>;

  pendingMix(pid: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  emissionPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

  poolCount(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    poolInfo(
      pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        to: string;
        allocPoint: BigNumber;
        lastEmitBlock: BigNumber;
      }
    >;

    totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

    started(overrides?: CallOverrides): Promise<boolean>;

    updatePool(pid: BigNumberish, overrides?: CallOverrides): Promise<void>;

    mix(overrides?: CallOverrides): Promise<string>;

    pendingMix(
      pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    emissionPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    poolCount(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "Add(address,uint256)"(
      to?: null,
      allocPoint?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { to: string; allocPoint: BigNumber }
    >;

    Add(
      to?: null,
      allocPoint?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { to: string; allocPoint: BigNumber }
    >;

    "Set(uint256,uint256)"(
      pid?: BigNumberish | null,
      allocPoint?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { pid: BigNumber; allocPoint: BigNumber }
    >;

    Set(
      pid?: BigNumberish | null,
      allocPoint?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { pid: BigNumber; allocPoint: BigNumber }
    >;

    "SetEmissionPerBlock(uint256)"(
      emissionPerBlock?: null
    ): TypedEventFilter<[BigNumber], { emissionPerBlock: BigNumber }>;

    SetEmissionPerBlock(
      emissionPerBlock?: null
    ): TypedEventFilter<[BigNumber], { emissionPerBlock: BigNumber }>;
  };

  estimateGas: {
    poolInfo(pid: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

    started(overrides?: CallOverrides): Promise<BigNumber>;

    updatePool(
      pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mix(overrides?: CallOverrides): Promise<BigNumber>;

    pendingMix(
      pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    emissionPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    poolCount(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    poolInfo(
      pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalAllocPoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    started(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updatePool(
      pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mix(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingMix(
      pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    emissionPerBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
