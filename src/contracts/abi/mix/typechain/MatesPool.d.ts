/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface MatesPoolInterface extends ethers.utils.Interface {
  functions: {
    "mixEmitter()": FunctionFragment;
    "accumulativeOf()": FunctionFragment;
    "maxNFTSupply()": FunctionFragment;
    "nft()": FunctionFragment;
    "claimedOf(uint256)": FunctionFragment;
    "claimableOf(uint256)": FunctionFragment;
    "claim(uint256[])": FunctionFragment;
    "mix()": FunctionFragment;
    "pid()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "mixEmitter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accumulativeOf",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxNFTSupply",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "nft", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimedOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimableOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "mix", values?: undefined): string;
  encodeFunctionData(functionFragment: "pid", values?: undefined): string;

  decodeFunctionResult(functionFragment: "mixEmitter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "accumulativeOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxNFTSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nft", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimedOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimableOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mix", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pid", data: BytesLike): Result;

  events: {
    "Distribute(address,uint256)": EventFragment;
    "Claim(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Distribute"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment;
}

export type DistributeEvent = TypedEvent<
  [string, BigNumber] & { by: string; distributed: BigNumber }
>;

export type ClaimEvent = TypedEvent<
  [BigNumber, BigNumber] & { id: BigNumber; claimed: BigNumber }
>;

export class MatesPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MatesPoolInterface;

  functions: {
    mixEmitter(overrides?: CallOverrides): Promise<[string]>;

    accumulativeOf(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxNFTSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    nft(overrides?: CallOverrides): Promise<[string]>;

    claimedOf(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claimableOf(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claim(
      ids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mix(overrides?: CallOverrides): Promise<[string]>;

    pid(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  mixEmitter(overrides?: CallOverrides): Promise<string>;

  accumulativeOf(overrides?: CallOverrides): Promise<BigNumber>;

  maxNFTSupply(overrides?: CallOverrides): Promise<BigNumber>;

  nft(overrides?: CallOverrides): Promise<string>;

  claimedOf(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  claimableOf(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  claim(
    ids: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mix(overrides?: CallOverrides): Promise<string>;

  pid(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    mixEmitter(overrides?: CallOverrides): Promise<string>;

    accumulativeOf(overrides?: CallOverrides): Promise<BigNumber>;

    maxNFTSupply(overrides?: CallOverrides): Promise<BigNumber>;

    nft(overrides?: CallOverrides): Promise<string>;

    claimedOf(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    claimableOf(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claim(ids: BigNumberish[], overrides?: CallOverrides): Promise<BigNumber>;

    mix(overrides?: CallOverrides): Promise<string>;

    pid(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "Distribute(address,uint256)"(
      by?: string | null,
      distributed?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { by: string; distributed: BigNumber }
    >;

    Distribute(
      by?: string | null,
      distributed?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { by: string; distributed: BigNumber }
    >;

    "Claim(uint256,uint256)"(
      id?: BigNumberish | null,
      claimed?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { id: BigNumber; claimed: BigNumber }
    >;

    Claim(
      id?: BigNumberish | null,
      claimed?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { id: BigNumber; claimed: BigNumber }
    >;
  };

  estimateGas: {
    mixEmitter(overrides?: CallOverrides): Promise<BigNumber>;

    accumulativeOf(overrides?: CallOverrides): Promise<BigNumber>;

    maxNFTSupply(overrides?: CallOverrides): Promise<BigNumber>;

    nft(overrides?: CallOverrides): Promise<BigNumber>;

    claimedOf(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    claimableOf(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claim(
      ids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mix(overrides?: CallOverrides): Promise<BigNumber>;

    pid(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    mixEmitter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accumulativeOf(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxNFTSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nft(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimedOf(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimableOf(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claim(
      ids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mix(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pid(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
