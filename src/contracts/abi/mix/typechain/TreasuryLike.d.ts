/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface TreasuryLikeInterface extends ethers.utils.Interface {
  functions: {
    "createTokenDistribution(address,uint256,uint256,uint256,address[],uint256[])": FunctionFragment;
    "refixDistributionRate(address,address[],uint256[])": FunctionFragment;
    "depositToken(address,uint256)": FunctionFragment;
    "distributions(address,address)": FunctionFragment;
    "createKlayDistribution(uint256,uint256,address[],uint256[])": FunctionFragment;
    "validOperator(address)": FunctionFragment;
    "fee()": FunctionFragment;
    "depositKlay()": FunctionFragment;
    "refixBlockAmount(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createTokenDistribution",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string[],
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "refixDistributionRate",
    values: [string, string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "depositToken",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "distributions",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createKlayDistribution",
    values: [BigNumberish, BigNumberish, string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "validOperator",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "depositKlay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "refixBlockAmount",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "createTokenDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "refixDistributionRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createKlayDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositKlay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "refixBlockAmount",
    data: BytesLike
  ): Result;

  events: {};
}

export class TreasuryLike extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TreasuryLikeInterface;

  functions: {
    createTokenDistribution(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: string[],
      arg5: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    refixDistributionRate(
      arg0: string,
      arg1: string[],
      arg2: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositToken(
      arg0: string,
      arg1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    distributions(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    createKlayDistribution(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: string[],
      arg3: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    validOperator(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    fee(overrides?: CallOverrides): Promise<[BigNumber]>;

    depositKlay(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    refixBlockAmount(
      arg0: string,
      arg1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  createTokenDistribution(
    arg0: string,
    arg1: BigNumberish,
    arg2: BigNumberish,
    arg3: BigNumberish,
    arg4: string[],
    arg5: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  refixDistributionRate(
    arg0: string,
    arg1: string[],
    arg2: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositToken(
    arg0: string,
    arg1: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  distributions(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<string>;

  createKlayDistribution(
    arg0: BigNumberish,
    arg1: BigNumberish,
    arg2: string[],
    arg3: BigNumberish[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  validOperator(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  fee(overrides?: CallOverrides): Promise<BigNumber>;

  depositKlay(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  refixBlockAmount(
    arg0: string,
    arg1: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createTokenDistribution(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: string[],
      arg5: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    refixDistributionRate(
      arg0: string,
      arg1: string[],
      arg2: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    depositToken(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    distributions(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<string>;

    createKlayDistribution(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: string[],
      arg3: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    validOperator(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    depositKlay(overrides?: CallOverrides): Promise<void>;

    refixBlockAmount(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    createTokenDistribution(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: string[],
      arg5: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    refixDistributionRate(
      arg0: string,
      arg1: string[],
      arg2: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositToken(
      arg0: string,
      arg1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    distributions(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createKlayDistribution(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: string[],
      arg3: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    validOperator(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    depositKlay(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    refixBlockAmount(
      arg0: string,
      arg1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createTokenDistribution(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: string[],
      arg5: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    refixDistributionRate(
      arg0: string,
      arg1: string[],
      arg2: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositToken(
      arg0: string,
      arg1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    distributions(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createKlayDistribution(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: string[],
      arg3: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    validOperator(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositKlay(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    refixBlockAmount(
      arg0: string,
      arg1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
