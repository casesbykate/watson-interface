/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface CryptoCriminals77MinterInterface extends ethers.utils.Interface {
  functions: {
    "signer()": FunctionFragment;
    "mint(address,uint256,uint256[],string,bytes)": FunctionFragment;
    "tryMint(string,uint256[])": FunctionFragment;
    "nft()": FunctionFragment;
    "setTryPrice(uint256)": FunctionFragment;
    "setSigner(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "tryPrice()": FunctionFragment;
    "cbk()": FunctionFragment;
    "cases(uint256,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "isOwner()": FunctionFragment;
    "triedKeys(string)": FunctionFragment;
    "usedCases(uint256)": FunctionFragment;
    "mix()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "signer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [string, BigNumberish, BigNumberish[], string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tryMint",
    values: [string, BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "nft", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setTryPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setSigner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "tryPrice", values?: undefined): string;
  encodeFunctionData(functionFragment: "cbk", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cases",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "isOwner", values?: undefined): string;
  encodeFunctionData(functionFragment: "triedKeys", values: [string]): string;
  encodeFunctionData(
    functionFragment: "usedCases",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "mix", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "signer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tryMint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nft", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTryPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setSigner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tryPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cbk", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cases", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "triedKeys", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "usedCases", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mix", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class CryptoCriminals77Minter extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: CryptoCriminals77MinterInterface;

  functions: {
    signer(overrides?: CallOverrides): Promise<[string]>;

    "signer()"(overrides?: CallOverrides): Promise<[string]>;

    mint(
      to: string,
      id: BigNumberish,
      _cases: BigNumberish[],
      key: string,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mint(address,uint256,uint256[],string,bytes)"(
      to: string,
      id: BigNumberish,
      _cases: BigNumberish[],
      key: string,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    tryMint(
      key: string,
      _cases: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "tryMint(string,uint256[])"(
      key: string,
      _cases: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    nft(overrides?: CallOverrides): Promise<[string]>;

    "nft()"(overrides?: CallOverrides): Promise<[string]>;

    setTryPrice(
      _price: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setTryPrice(uint256)"(
      _price: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setSigner(
      _signer: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setSigner(address)"(
      _signer: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    tryPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    "tryPrice()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    cbk(overrides?: CallOverrides): Promise<[string]>;

    "cbk()"(overrides?: CallOverrides): Promise<[string]>;

    cases(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "cases(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    isOwner(overrides?: CallOverrides): Promise<[boolean]>;

    "isOwner()"(overrides?: CallOverrides): Promise<[boolean]>;

    triedKeys(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    "triedKeys(string)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    usedCases(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "usedCases(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mix(overrides?: CallOverrides): Promise<[string]>;

    "mix()"(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  mint(
    to: string,
    id: BigNumberish,
    _cases: BigNumberish[],
    key: string,
    signature: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mint(address,uint256,uint256[],string,bytes)"(
    to: string,
    id: BigNumberish,
    _cases: BigNumberish[],
    key: string,
    signature: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  tryMint(
    key: string,
    _cases: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "tryMint(string,uint256[])"(
    key: string,
    _cases: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  nft(overrides?: CallOverrides): Promise<string>;

  "nft()"(overrides?: CallOverrides): Promise<string>;

  setTryPrice(
    _price: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setTryPrice(uint256)"(
    _price: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setSigner(
    _signer: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setSigner(address)"(
    _signer: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  tryPrice(overrides?: CallOverrides): Promise<BigNumber>;

  "tryPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

  cbk(overrides?: CallOverrides): Promise<string>;

  "cbk()"(overrides?: CallOverrides): Promise<string>;

  cases(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "cases(uint256,uint256)"(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  isOwner(overrides?: CallOverrides): Promise<boolean>;

  "isOwner()"(overrides?: CallOverrides): Promise<boolean>;

  triedKeys(arg0: string, overrides?: CallOverrides): Promise<string>;

  "triedKeys(string)"(arg0: string, overrides?: CallOverrides): Promise<string>;

  usedCases(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  "usedCases(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mix(overrides?: CallOverrides): Promise<string>;

  "mix()"(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    signer(overrides?: CallOverrides): Promise<string>;

    "signer()"(overrides?: CallOverrides): Promise<string>;

    mint(
      to: string,
      id: BigNumberish,
      _cases: BigNumberish[],
      key: string,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "mint(address,uint256,uint256[],string,bytes)"(
      to: string,
      id: BigNumberish,
      _cases: BigNumberish[],
      key: string,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    tryMint(
      key: string,
      _cases: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "tryMint(string,uint256[])"(
      key: string,
      _cases: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    nft(overrides?: CallOverrides): Promise<string>;

    "nft()"(overrides?: CallOverrides): Promise<string>;

    setTryPrice(_price: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "setTryPrice(uint256)"(
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSigner(_signer: string, overrides?: CallOverrides): Promise<void>;

    "setSigner(address)"(
      _signer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    tryPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "tryPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    cbk(overrides?: CallOverrides): Promise<string>;

    "cbk()"(overrides?: CallOverrides): Promise<string>;

    cases(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "cases(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    isOwner(overrides?: CallOverrides): Promise<boolean>;

    "isOwner()"(overrides?: CallOverrides): Promise<boolean>;

    triedKeys(arg0: string, overrides?: CallOverrides): Promise<string>;

    "triedKeys(string)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    usedCases(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    "usedCases(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mix(overrides?: CallOverrides): Promise<string>;

    "mix()"(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    signer(overrides?: CallOverrides): Promise<BigNumber>;

    "signer()"(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      to: string,
      id: BigNumberish,
      _cases: BigNumberish[],
      key: string,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mint(address,uint256,uint256[],string,bytes)"(
      to: string,
      id: BigNumberish,
      _cases: BigNumberish[],
      key: string,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    tryMint(
      key: string,
      _cases: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "tryMint(string,uint256[])"(
      key: string,
      _cases: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    nft(overrides?: CallOverrides): Promise<BigNumber>;

    "nft()"(overrides?: CallOverrides): Promise<BigNumber>;

    setTryPrice(
      _price: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setTryPrice(uint256)"(
      _price: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setSigner(_signer: string, overrides?: Overrides): Promise<BigNumber>;

    "setSigner(address)"(
      _signer: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    tryPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "tryPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    cbk(overrides?: CallOverrides): Promise<BigNumber>;

    "cbk()"(overrides?: CallOverrides): Promise<BigNumber>;

    cases(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "cases(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    isOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "isOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    triedKeys(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "triedKeys(string)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    usedCases(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "usedCases(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mix(overrides?: CallOverrides): Promise<BigNumber>;

    "mix()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    signer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "signer()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      to: string,
      id: BigNumberish,
      _cases: BigNumberish[],
      key: string,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mint(address,uint256,uint256[],string,bytes)"(
      to: string,
      id: BigNumberish,
      _cases: BigNumberish[],
      key: string,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    tryMint(
      key: string,
      _cases: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "tryMint(string,uint256[])"(
      key: string,
      _cases: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    nft(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "nft()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setTryPrice(
      _price: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setTryPrice(uint256)"(
      _price: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setSigner(
      _signer: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setSigner(address)"(
      _signer: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    tryPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tryPrice()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cbk(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "cbk()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cases(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "cases(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    triedKeys(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "triedKeys(string)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    usedCases(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "usedCases(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mix(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "mix()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
